
package veterinaria;

import dao.DAOEspecie;
import dao.DAOPaciente;
import dao.DaoPropietario;
import entidades.Especie;
import entidades.Paciente;
import entidades.Propietario;
import java.io.File;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class JFExpediente_Paciente extends javax.swing.JFrame {
    
    
    private List<Propietario> propietarios;
    private List<Especie> especies;
    private List<Paciente> pacientes;
    private DefaultTableModel modelo = new DefaultTableModel();
    private Paciente actual;
    
    /**
     * Creates new form JFExpediente_Paciente
     */
    public JFExpediente_Paciente() {
        this.insertarColumnas();
        
        initComponents();
        this.activarControles(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSexo = new javax.swing.ButtonGroup();
        panExpediente = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtColor = new javax.swing.JTextField();
        lblColor = new javax.swing.JLabel();
        cboTamaño = new javax.swing.JComboBox<>();
        lblTamaño = new javax.swing.JLabel();
        rbMacho = new javax.swing.JRadioButton();
        rbHembra = new javax.swing.JRadioButton();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        lblPropietario = new javax.swing.JLabel();
        cboPropietario = new javax.swing.JComboBox<>();
        dchFechaNac = new com.toedter.calendar.JDateChooser();
        lblFechaNac = new javax.swing.JLabel();
        lblEspecie = new javax.swing.JLabel();
        cboEspecie = new javax.swing.JComboBox<>();
        lblRaza = new javax.swing.JLabel();
        txtRaza = new javax.swing.JTextField();
        chkVigencia = new javax.swing.JCheckBox();
        panListado = new javax.swing.JPanel();
        btnListar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListado = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        lblNombrePaciente = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        btnCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuExportarExpediente = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panExpediente.setBackground(new java.awt.Color(0, 102, 102));
        panExpediente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        panExpediente.setForeground(new java.awt.Color(255, 255, 255));

        lblNombre.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(255, 255, 255));
        lblNombre.setText("Nombre");

        txtNombre.setText(" ");

        txtColor.setText(" ");

        lblColor.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblColor.setForeground(new java.awt.Color(255, 255, 255));
        lblColor.setText("Color");

        cboTamaño.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elija el Tamaño", "Grande", "Mediano", "Pequeño" }));

        lblTamaño.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblTamaño.setForeground(new java.awt.Color(255, 255, 255));
        lblTamaño.setText("Tamaño");

        bgSexo.add(rbMacho);
        rbMacho.setText("Macho");

        bgSexo.add(rbHembra);
        rbHembra.setText("Hembra");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        lblPropietario.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblPropietario.setForeground(new java.awt.Color(255, 255, 255));
        lblPropietario.setText("Propietario");

        cboPropietario.setModel(this.cargarPropietarios());

        dchFechaNac.setDateFormatString("yyyy-MM-dd");

        lblFechaNac.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblFechaNac.setForeground(new java.awt.Color(255, 255, 255));
        lblFechaNac.setText("Fecha de nacimiento");

        lblEspecie.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblEspecie.setForeground(new java.awt.Color(255, 255, 255));
        lblEspecie.setText("Especie");

        cboEspecie.setModel(cargarEspecies());

        lblRaza.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblRaza.setForeground(new java.awt.Color(255, 255, 255));
        lblRaza.setText("Raza");

        chkVigencia.setText("Vigencia");

        javax.swing.GroupLayout panExpedienteLayout = new javax.swing.GroupLayout(panExpediente);
        panExpediente.setLayout(panExpedienteLayout);
        panExpedienteLayout.setHorizontalGroup(
            panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panExpedienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panExpedienteLayout.createSequentialGroup()
                        .addComponent(lblPropietario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboPropietario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panExpedienteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAceptar)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar))
                    .addGroup(panExpedienteLayout.createSequentialGroup()
                        .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panExpedienteLayout.createSequentialGroup()
                                .addComponent(lblNombre)
                                .addGap(18, 18, 18)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(panExpedienteLayout.createSequentialGroup()
                                    .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTamaño)
                                        .addComponent(lblColor))
                                    .addGap(18, 18, 18)
                                    .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(panExpedienteLayout.createSequentialGroup()
                                            .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cboTamaño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(panExpedienteLayout.createSequentialGroup()
                                                    .addGap(12, 12, 12)
                                                    .addComponent(rbMacho)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(rbHembra)))
                                            .addGap(45, 45, 45))
                                        .addComponent(txtColor)))
                                .addGroup(panExpedienteLayout.createSequentialGroup()
                                    .addComponent(lblFechaNac)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dchFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panExpedienteLayout.createSequentialGroup()
                                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEspecie)
                                    .addComponent(lblRaza))
                                .addGap(18, 18, 18)
                                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRaza, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(chkVigencia))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panExpedienteLayout.setVerticalGroup(
            panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panExpedienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPropietario)
                    .addComponent(cboPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRaza)
                    .addComponent(txtRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEspecie))
                .addGap(18, 18, 18)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboTamaño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTamaño))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMacho)
                    .addComponent(rbHembra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblColor)
                    .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFechaNac)
                    .addComponent(dchFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chkVigencia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(panExpedienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAceptar))
                .addGap(26, 26, 26))
        );

        getContentPane().add(panExpediente, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 79, -1, 450));

        panListado.setBackground(new java.awt.Color(0, 102, 102));
        panListado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        panListado.setForeground(new java.awt.Color(255, 255, 255));

        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        tblListado.setModel(this.modelo);
        jScrollPane1.setViewportView(tblListado);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        lblNombrePaciente.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblNombrePaciente.setForeground(new java.awt.Color(255, 255, 255));
        lblNombrePaciente.setText("Nombre del Paciente");

        javax.swing.GroupLayout panListadoLayout = new javax.swing.GroupLayout(panListado);
        panListado.setLayout(panListadoLayout);
        panListadoLayout.setHorizontalGroup(
            panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panListadoLayout.createSequentialGroup()
                        .addComponent(btnNuevo)
                        .addGap(46, 46, 46)
                        .addComponent(btnModificar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panListadoLayout.createSequentialGroup()
                        .addComponent(lblNombrePaciente)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombrePaciente)
                        .addGap(18, 18, 18)
                        .addComponent(btnListar)))
                .addContainerGap())
        );
        panListadoLayout.setVerticalGroup(
            panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListar)
                    .addComponent(lblNombrePaciente)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnNuevo))
                .addContainerGap())
        );

        getContentPane().add(panListado, new org.netbeans.lib.awtextra.AbsoluteConstraints(339, 79, 710, -1));

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 540, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Expediente del Paciente");
        jLabel1.setToolTipText("");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(363, 6, -1, 55));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/img/FONDOTOTAL3.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 590));

        jMenu1.setText("Archivo");

        mnuExportarExpediente.setText("Exportar reporte");
        mnuExportarExpediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportarExpedienteActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExportarExpediente);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.actual = null;
        this.activarControles(true);
        this.limpiarControles();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.activarControles(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        DAOPaciente dao;
        Paciente paciente;
        
        if (this.validarDatos() == true){
            paciente = new Paciente();
            paciente.setNombre(this.txtNombre.getText());
            paciente.setRaza(this.txtRaza.getText());
            
            if (this.cboTamaño.getSelectedIndex() == 1) {
                paciente.setTamano("Grande");
            }else if (this.cboTamaño.getSelectedIndex() == 2) {
                paciente.setTamano("Mediano");
            }else if (this.cboTamaño.getSelectedIndex() == 3) {
                paciente.setTamano("Pequeño");
            }
            
            if (this.rbMacho.isSelected() == true) {
                paciente.setSexo('M');
            }else if (this.rbHembra.isSelected() == true) {
                paciente.setSexo('H');
            }
            paciente.setColor(this.txtColor.getText());
            paciente.setFechaNac(this.dchFechaNac.getDate());
            
            paciente.setPropietario(this.propietarios.get(this.cboPropietario.getSelectedIndex()));
            paciente.setEspecie(this.especies.get(this.cboEspecie.getSelectedIndex()));
            paciente.setVigencia(this.chkVigencia.isSelected());
            dao = new DAOPaciente();
            
            try {
                if (this.actual == null) {
                    dao.registrar(paciente);
                }else{
                    paciente.setCodigo(this.actual.getCodigo());
                    dao.actualizar(paciente);
                }
                this.activarControles(false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se pudo registrar"+e.getMessage());
            }finally{   
                paciente = null;
                dao = null;
                
            }
        }else{
            JOptionPane.showMessageDialog(this, "Llene los campos faltantes porfavor\n"
                    + ":D");
        }
        
    }//GEN-LAST:event_btnAceptarActionPerformed

    private boolean validarDatos(){
        boolean validar = true;
        
        if (this.txtNombre.getText().length() == 0) {
            validar = false;
        }
        if (this.cboPropietario.getSelectedIndex() < 0) {
            validar = false;
            JOptionPane.showMessageDialog(this, "Elija un tamaño porfavor :D");
        }
        if (this.cboTamaño.getSelectedIndex() < 0) {
            validar = false;
        }

        return validar;
    }
    
    
    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        DAOPaciente dao = new DAOPaciente();

      try {
        this.pacientes = dao.listar(
                    this.txtNombrePaciente.getText());
        this.llenarTabla();
      } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
      } finally {
            dao = null;
      }
    }//GEN-LAST:event_btnListarActionPerformed

    private void llenarTabla(){
        this.modelo.setRowCount(0);
        for (Paciente paciente : pacientes) {
            this.modelo.addRow(new Object[]{
                paciente.getPropietario().getNombres(),
                paciente.getNombre(),
                paciente.getEspecie().getNombre(),
                paciente.getTamano(),
                (paciente.getSexo() == 'M'?"Macho":"Hembra"),
                paciente.getCalcularEdad(),
                
            });
        }
    }
    
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int pos = this.tblListado.getSelectedRow();
        if (pos > -1) {
            this.actual = this.pacientes.get(pos);
            this.presentarDatos();
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione un paciente");
            this.tblListado.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void impresion(){
        //String imagen = "excel\\tablaimporte.xls";
        String archivo = JOptionPane.showInputDialog("Escriba el nombre del Archivo");
        String Ruta = System.getProperty("user.dir") + "\\excel\\" + archivo + ".xls";
        File file = new File(Ruta);
        ExportarExcel excel = new ExportarExcel(tblListado,file,"tablaimporte");
        excel.export();
    }
    
    private void mnuExportarExpedienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportarExpedienteActionPerformed
        this.impresion();
    }//GEN-LAST:event_mnuExportarExpedienteActionPerformed

    private ComboBoxModel cargarEspecies(){
            DAOEspecie dao = new DAOEspecie();
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        
        try {
            this.especies = dao.listar();
            this.llenarComboEspecie(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }finally{
            dao = null;
        }
        return modelo;
    }
    
    private void llenarComboEspecie(DefaultComboBoxModel modelo){
        for (Especie especie: this.especies) {
            modelo.addElement(especie.getNombre());
        }
    }
    
    private ComboBoxModel cargarPropietarios(){
            DaoPropietario dao = new DaoPropietario();
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        
        try {
            this.propietarios = dao.listar("");
            this.llenarComboPropietario(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }finally{
            dao = null;
        }
        return modelo;
    }
    
    private void llenarComboPropietario(DefaultComboBoxModel modelo){
        for (Propietario propietario : this.propietarios) {
            modelo.addElement(propietario.getNombres());
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFExpediente_Paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFExpediente_Paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFExpediente_Paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFExpediente_Paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFExpediente_Paciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgSexo;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cboEspecie;
    private javax.swing.JComboBox<String> cboPropietario;
    private javax.swing.JComboBox<String> cboTamaño;
    private javax.swing.JCheckBox chkVigencia;
    private com.toedter.calendar.JDateChooser dchFechaNac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblColor;
    private javax.swing.JLabel lblEspecie;
    private javax.swing.JLabel lblFechaNac;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JLabel lblPropietario;
    private javax.swing.JLabel lblRaza;
    private javax.swing.JLabel lblTamaño;
    private javax.swing.JMenuItem mnuExportarExpediente;
    private javax.swing.JPanel panExpediente;
    private javax.swing.JPanel panListado;
    private javax.swing.JRadioButton rbHembra;
    private javax.swing.JRadioButton rbMacho;
    private javax.swing.JTable tblListado;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextField txtRaza;
    // End of variables declaration//GEN-END:variables

    private void insertarColumnas() {
        this.modelo.addColumn("Propietario");
        this.modelo.addColumn("Nombre Paciente");
        this.modelo.addColumn("Especie");
        this.modelo.addColumn("Tamaño");
        this.modelo.addColumn("Sexo");
        this.modelo.addColumn("Edad");
    }

    private void activarControles(boolean estado) {
        this.panExpediente.setEnabled(estado);
        this.lblPropietario.setEnabled(estado);
        this.cboPropietario.setEnabled(estado);
        this.lblNombre.setEnabled(estado);
        this.txtNombre.setEnabled(estado);
        this.lblEspecie.setEnabled(estado);
        this.cboEspecie.setEnabled(estado);
        this.lblRaza.setEnabled(estado);
        this.txtRaza.setEnabled(estado);
        this.lblTamaño.setEnabled(estado);
        this.cboTamaño.setEnabled(estado);
        this.rbMacho.setEnabled(estado);
        this.rbHembra.setEnabled(estado);
        this.lblFechaNac.setEnabled(estado);
        this.dchFechaNac.setEnabled(estado);
        this.lblColor.setEnabled(estado);
        this.txtColor.setEnabled(estado);
        this.btnAceptar.setEnabled(estado);
        this.btnCancelar.setEnabled(estado);
        this.chkVigencia.setEnabled(estado);
        
        this.panListado.setEnabled(!estado);
        this.lblNombrePaciente.setEnabled(!estado);
        this.txtNombrePaciente.setEnabled(!estado);
        this.btnListar.setEnabled(!estado);
        this.tblListado.setEnabled(!estado);
        this.btnNuevo.setEnabled(!estado);
        this.btnModificar.setEnabled(!estado);
        this.btnCerrar.setEnabled(!estado);
        if (estado == true) {
            this.txtNombre.requestFocusInWindow();
        }else{
            this.btnListar.requestFocusInWindow();
        }
    }

    private void limpiarControles() {

        this.cboPropietario.setSelectedIndex(-1);
        this.txtNombre.setText("");
        this.cboEspecie.setSelectedIndex(0);
        this.cboTamaño.setSelectedIndex(0);
        this.rbMacho.setSelected(true);
        this.txtColor.setText("");
        this.txtRaza.setText("");
        this.txtNombrePaciente.setText("");
        this.chkVigencia.setSelected(true);
        this.dchFechaNac.setDate(Date.valueOf(LocalDate.now()));

    }
    
    public void presentarDatos(){
        DAOPaciente dao = new DAOPaciente();
        try {
            this.actual = dao.leer(this.actual);
            if (this.actual != null) {
                this.cboPropietario.setSelectedIndex(
                        this.buscarPropietario(this.actual.getPropietario()));
                this.txtNombre.setText(this.actual.getNombre());
                this.txtRaza.setText(this.actual.getRaza());
                this.cboEspecie.setSelectedIndex(
                        this.buscarEspecie(this.actual.getEspecie()));
                this.cboTamaño.setSelectedItem(this.actual.getTamano());
                
                    if (this.actual.getSexo() == 'M') {
                        this.rbMacho.setSelected(true);
                    } else {
                        this.rbHembra.setSelected(true);
                    }
                this.txtColor.setText(this.actual.getColor());
                this.dchFechaNac.setDate(this.actual.getFechaNac());
                this.chkVigencia.setSelected(this.actual.isVigencia());
                this.activarControles(true);
            }else{
                JOptionPane.showMessageDialog(this, "No se encontro el paciente");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }finally{
            dao = null;
        }
    }
    
    private int buscarPropietario(Propietario buscado){
        int i = 0;
        for (Propietario pro : this.propietarios) {
            if (pro.getCodigo() == buscado.getCodigo()) {
                return i;
            }
            i++;
        }
        
        return -1;
    }
    
    private int buscarEspecie(Especie buscado){
        int i = 0;
        for (Especie esp : this.especies) {
            if (esp.getCodigo() == buscado.getCodigo()) {
                return i;
            }
            i++;
        }
        
        return -1;
    }

    private void eliminarDelVector(int posEliminar) {
        /*for (int i = posEliminar; i < Veterinaria.cantidadActualPacientes - 1; i++) {
        Veterinaria.pacientes[i] = Veterinaria.pacientes[i + 1];
            }
        Veterinaria.cantidadActualPacientes--;*/
    }
}
