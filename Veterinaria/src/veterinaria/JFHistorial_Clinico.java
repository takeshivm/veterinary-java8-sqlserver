/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package veterinaria;

import dao.DAOHistorialClinico;
import dao.DAOPaciente;
import entidades.HistorialClinico;
import entidades.Medico;
import entidades.Paciente;
import java.io.File;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrador
 */
public class JFHistorial_Clinico extends javax.swing.JFrame {

    private List<Paciente> pacientes;
    private List<HistorialClinico> histotias;
    private HistorialClinico actual;
    private DefaultTableModel modelo = new DefaultTableModel();

    /**
     * Creates new form JFHistorial_Clinico
     */
    public JFHistorial_Clinico() {
        this.insertarColumna();
        initComponents();
        this.activarControles(false);
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDesparasitacion = new javax.swing.ButtonGroup();
        btnCerrar = new javax.swing.JButton();
        PanHistorial = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        lblFecha = new javax.swing.JLabel();
        dchFecha = new com.toedter.calendar.JDateChooser();
        lblDesparasitacion = new javax.swing.JLabel();
        rbSi = new javax.swing.JRadioButton();
        rbNo = new javax.swing.JRadioButton();
        lblPaciente = new javax.swing.JLabel();
        cboPaciente = new javax.swing.JComboBox<>();
        lblEnfermedadPrevia = new javax.swing.JLabel();
        txtEnfermedadPrevia = new javax.swing.JTextField();
        lblAlergia = new javax.swing.JLabel();
        txtAlergia = new javax.swing.JTextField();
        chkVigencia = new javax.swing.JCheckBox();
        panListado = new javax.swing.JPanel();
        btnListar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListado = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        lblNombrePaciente = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuExporarHistorial = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 580, -1, -1));

        PanHistorial.setBackground(new java.awt.Color(0, 153, 153));
        PanHistorial.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Historial", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        PanHistorial.setToolTipText("");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        lblFecha.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(0, 0, 0));
        lblFecha.setText("Fecha");

        dchFecha.setDateFormatString("dd-MM-yyyy");

        lblDesparasitacion.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblDesparasitacion.setForeground(new java.awt.Color(0, 0, 0));
        lblDesparasitacion.setText("Desparasitacion");

        bgDesparasitacion.add(rbSi);
        rbSi.setText("Si");

        bgDesparasitacion.add(rbNo);
        rbNo.setText("No");

        lblPaciente.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblPaciente.setForeground(new java.awt.Color(0, 0, 0));
        lblPaciente.setText("Paciente");

        cboPaciente.setModel(this.cargarPacientes());

        lblEnfermedadPrevia.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblEnfermedadPrevia.setForeground(new java.awt.Color(0, 0, 0));
        lblEnfermedadPrevia.setText("Enfermedad previa");

        lblAlergia.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblAlergia.setForeground(new java.awt.Color(0, 0, 0));
        lblAlergia.setText("Alergia");

        chkVigencia.setText("Vigencia");
        chkVigencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVigenciaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanHistorialLayout = new javax.swing.GroupLayout(PanHistorial);
        PanHistorial.setLayout(PanHistorialLayout);
        PanHistorialLayout.setHorizontalGroup(
            PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanHistorialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanHistorialLayout.createSequentialGroup()
                        .addComponent(lblPaciente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cboPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanHistorialLayout.createSequentialGroup()
                        .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanHistorialLayout.createSequentialGroup()
                                .addComponent(lblDesparasitacion)
                                .addGap(32, 32, 32)
                                .addComponent(rbSi)
                                .addGap(18, 18, 18)
                                .addComponent(rbNo))
                            .addGroup(PanHistorialLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(chkVigencia))
                            .addGroup(PanHistorialLayout.createSequentialGroup()
                                .addComponent(lblAlergia)
                                .addGap(94, 94, 94)
                                .addComponent(txtAlergia, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanHistorialLayout.createSequentialGroup()
                                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEnfermedadPrevia)
                                    .addComponent(lblFecha))
                                .addGap(18, 18, 18)
                                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dchFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEnfermedadPrevia, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanHistorialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAceptar)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar)))
                .addContainerGap())
        );
        PanHistorialLayout.setVerticalGroup(
            PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanHistorialLayout.createSequentialGroup()
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanHistorialLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lblPaciente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanHistorialLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cboPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFecha)
                    .addComponent(dchFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnfermedadPrevia)
                    .addComponent(txtEnfermedadPrevia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAlergia)
                    .addComponent(txtAlergia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDesparasitacion)
                    .addComponent(rbSi)
                    .addComponent(rbNo))
                .addGap(18, 18, 18)
                .addComponent(chkVigencia)
                .addGap(18, 18, 18)
                .addGroup(PanHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addContainerGap(174, Short.MAX_VALUE))
        );

        getContentPane().add(PanHistorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 73, 340, -1));

        panListado.setBackground(new java.awt.Color(0, 153, 153));
        panListado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        tblListado.setModel(this.modelo);
        jScrollPane1.setViewportView(tblListado);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        lblNombrePaciente.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblNombrePaciente.setForeground(new java.awt.Color(0, 0, 0));
        lblNombrePaciente.setText("Nombre del paciente");

        javax.swing.GroupLayout panListadoLayout = new javax.swing.GroupLayout(panListado);
        panListado.setLayout(panListadoLayout);
        panListadoLayout.setHorizontalGroup(
            panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panListadoLayout.createSequentialGroup()
                        .addComponent(btnNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panListadoLayout.createSequentialGroup()
                        .addComponent(lblNombrePaciente)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombrePaciente)
                        .addGap(18, 18, 18)
                        .addComponent(btnListar)))
                .addContainerGap())
        );
        panListadoLayout.setVerticalGroup(
            panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListar)
                    .addComponent(lblNombrePaciente)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnNuevo))
                .addContainerGap())
        );

        getContentPane().add(panListado, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 73, 660, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setText("Historia Clinica");
        jLabel2.setToolTipText("");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, -1, 55));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/img/FONDOTOTAL3.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, 680));

        jMenu1.setText("Archivo");

        mnuExporarHistorial.setText("Exportar reporte");
        mnuExporarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExporarHistorialActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExporarHistorial);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.actual = null;
        this.activarControles(true);
        this.limpiarControles();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        DAOHistorialClinico dao;
        HistorialClinico historial;
        
        if (this.validarDatos() == true) {
            historial = new HistorialClinico();
            
            historial.setPaciente(this.pacientes.get(this.cboPaciente.getSelectedIndex()));
            historial.setFecha(this.dchFecha.getDate());
            historial.setEnfermedad(this.txtEnfermedadPrevia.getText());
            historial.setAlergia(this.txtAlergia.getText());
            if (this.rbSi.isSelected() == true) {
                historial.setDesparasitacion(true);
            }else{
                historial.setDesparasitacion(false);
            }
            historial.setVigencia(this.chkVigencia.isSelected());
            
            dao = new DAOHistorialClinico();
            try {
                if (this.actual == null) {
                    dao.registrar(historial);
                }else{
                    historial.setCodigo(this.actual.getCodigo());
                    dao.actualizar(historial);
                }
                this.activarControles(false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Boton Ingresar "+e.getMessage());
            }finally{
                dao = null;
                historial = null;
            }
        }else{
            JOptionPane.showMessageDialog(this, "Ingrese datos en todos los campos\n"
                    + ":D");
        }
        
    }//GEN-LAST:event_btnAceptarActionPerformed

    private boolean validarDatos(){
        boolean validar = true;
        
        if (this.txtEnfermedadPrevia.getText().length() == 0) {
            validar = false;
        }
        if (this.txtAlergia.getText().length() == 0) {
            validar = false;
        }
        if (this.cboPaciente.getSelectedIndex() < 0) {
            validar = false;
        }
        return validar;
    }
    
    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        DAOHistorialClinico dao = new DAOHistorialClinico();
        
        try {
            this.histotias = dao.listar
                    (this.txtNombrePaciente.getText());
            this.llenarTabla();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }finally{
            dao = null;
        }
        
    }//GEN-LAST:event_btnListarActionPerformed

    private void llenarTabla(){
        this.modelo.setRowCount(0);
        
        for (HistorialClinico historial : this.histotias) {
            modelo.addRow(new Object[]{
                historial.getPaciente().getNombre(),
                historial.getEnfermedad(),
                historial.getAlergia(),
                (historial.isDesparasitacion()==true?"SI":"NO")
            });
        }
    }
    
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
       int pos = this.tblListado.getSelectedRow();

        if (pos > -1) {
            this.actual = this.histotias.get(pos);
            this.presentarDatos();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un paciente");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.activarControles(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void chkVigenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVigenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkVigenciaActionPerformed

    private void impresion(){
        //String imagen = "excel\\tablaimporte.xls";
        String archivo = JOptionPane.showInputDialog("Escriba el nombre del Archivo");
        String Ruta = System.getProperty("user.dir") + "\\excel\\" + archivo + ".xls";
        File file = new File(Ruta);
        ExportarExcel excel = new ExportarExcel(tblListado,file,"tablaimporte");
        excel.export();
    }
    
    private void mnuExporarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExporarHistorialActionPerformed
        this.impresion();
    }//GEN-LAST:event_mnuExporarHistorialActionPerformed

    private ComboBoxModel cargarPacientes(){
        DAOPaciente dao = new DAOPaciente();
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        
        try {
            this.pacientes = dao.listar(
                    this.txtNombrePaciente.getText());
            this.llenarComboPaciente(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }finally{
            dao = null;
        }
        return modelo;
    }
    
    private void llenarComboPaciente(DefaultComboBoxModel modelo){
        
        for (Paciente paciente : this.pacientes) {
            modelo.addElement(paciente.getNombre());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFHistorial_Clinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFHistorial_Clinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFHistorial_Clinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFHistorial_Clinico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFHistorial_Clinico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanHistorial;
    private javax.swing.ButtonGroup bgDesparasitacion;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cboPaciente;
    private javax.swing.JCheckBox chkVigencia;
    private com.toedter.calendar.JDateChooser dchFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAlergia;
    private javax.swing.JLabel lblDesparasitacion;
    private javax.swing.JLabel lblEnfermedadPrevia;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JLabel lblPaciente;
    private javax.swing.JMenuItem mnuExporarHistorial;
    private javax.swing.JPanel panListado;
    private javax.swing.JRadioButton rbNo;
    private javax.swing.JRadioButton rbSi;
    private javax.swing.JTable tblListado;
    private javax.swing.JTextField txtAlergia;
    private javax.swing.JTextField txtEnfermedadPrevia;
    private javax.swing.JTextField txtNombrePaciente;
    // End of variables declaration//GEN-END:variables

    private void activarControles(boolean estado) {
        this.PanHistorial.setEnabled(estado);
        this.lblPaciente.setEnabled(estado);
        this.cboPaciente.setEnabled(estado);
        this.lblFecha.setEnabled(estado);
        this.dchFecha.setEnabled(estado);
        this.lblEnfermedadPrevia.setEnabled(estado);
        this.txtEnfermedadPrevia.setEnabled(estado);
        this.lblAlergia.setEnabled(estado);
        this.txtAlergia.setEnabled(estado);
        this.lblDesparasitacion.setEnabled(estado);
        this.rbSi.setEnabled(estado);
        this.rbNo.setEnabled(estado);
        this.btnAceptar.setEnabled(estado);
        this.btnCancelar .setEnabled(estado);
        this.chkVigencia .setEnabled(estado);
        
        this.panListado.setEnabled(!estado);
        this.lblNombrePaciente.setEnabled(!estado);
        this.txtNombrePaciente.setEnabled(!estado);
        this.btnListar.setEnabled(!estado);
        this.btnNuevo.setEnabled(!estado);
        this.btnModificar.setEnabled(!estado);
        this.btnCerrar.setEnabled(!estado);
        
        if (estado == true) {
            this.cboPaciente.requestFocusInWindow();
        }else{
            this.txtNombrePaciente.requestFocusInWindow();
        }
    }

    private void limpiarControles() {
        
        this.cboPaciente.setSelectedIndex(-1);
        this.dchFecha.setDate(Date.valueOf(LocalDate.now()));
        this.txtEnfermedadPrevia.setText("");
        this.txtAlergia.setText("");
        this.txtNombrePaciente.setText("");
        this.rbSi.setSelected(true);
        this.chkVigencia.setSelected(true);
    }
    
    public void insertarColumna(){
        //this.modelo.addColumn("Paciente");
        
        this.modelo.addColumn("Paciente");
        this.modelo.addColumn("Enfermedad Previa");
        this.modelo.addColumn("Alergia");
        this.modelo.addColumn("Desparasitacion");
    }

    private void presentarDatos() {
        DAOHistorialClinico dao = new DAOHistorialClinico();
        
        try {
            this.actual = dao.leer(this.actual);
            if (this.actual != null) {
                this.cboPaciente.setSelectedIndex(
                    this.buscarPaciente(this.actual.getPaciente()));
                this.dchFecha.setDate(this.actual.getFecha());
                this.txtEnfermedadPrevia.setText(this.actual.getEnfermedad());
                this.txtAlergia.setText(this.actual.getAlergia());
                if (this.actual.isDesparasitacion() == true) {
                    this.rbSi.setSelected(true);
                }else{
                    this.rbNo.setSelected(true);
                }
                this.chkVigencia.setSelected(this.actual.isVigencia());
                this.activarControles(true);
                this.cboPaciente.setEnabled(false);
                this.dchFecha.requestFocusInWindow();
            }else{
                JOptionPane.showMessageDialog(this, "No se encontro el Paciente");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }finally{
            dao = null;
        }
        
    }
    
    private int buscarPaciente(Paciente buscado){
        int i = 0;
        for (Paciente pac: this.pacientes)  {
            if (pac.getCodigo() == buscado.getCodigo()) {
                return i;
            }
            i++;
        }
        
        return -1;
    }

    private void EliminarDelVector(int posEliminar) {
       /* for (int i = posEliminar; i < Veterinaria.cantidadActualhistorias - 1; i++) {
        Veterinaria.historias[i] = Veterinaria.historias[i + 1];
            }
        Veterinaria.cantidadActualhistorias--;*/
    }
}
